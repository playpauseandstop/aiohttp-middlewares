defaults:
  run:
    shell: "bash"

name: "CI"

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  PIPX_HOME: ".pipx"
  PYTHONUNBUFFERED: "1"
  # Get latest versions by running,
  #
  # ```bash
  # pip-latest-release badabump poetry tox tox-gh-actions twine wheel
  # ```
  #
  BADABUMP_VERSION: "21.3.3"
  POETRY_VERSION: "1.1.13"
  TOX_VERSION: "3.25.0"
  TOX_GH_ACTIONS_VERSION: "2.9.1"
  TWINE_VERSION: "4.0.1"
  WHEEL_VERSION: "0.37.1"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python"
        name: "Install Python"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version-file: ".python-version"

      - name: "Cache pipx"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.pipx/"
          key: "pipx-${{ runner.os }}-${{ steps.python.outputs.python-version }}"

      - name: "Install poetry"
        run: "pipx install --python='${{ steps.python.outputs.python-path }}' poetry==${{ env.POETRY_VERSION }}"

      # Cache venv step used instead of `cache: "poetry"` option to
      # `actions/setup-python` action cause poetry still need to be
      # additionally configured, as it first installed via global Python
      # which does not match expected Python version
      - name: "Cache venv"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.venv/"
          key: "venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}"

      - name: "Install package"
        run: "poetry install"

      - name: "Import package"
        run: "poetry run python3 -c 'import aiohttp_middlewares'"

  docs:
    name: "Verify documentation build well"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python"
        name: "Install Python"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version-file: ".python-version"
          cache: "pip"
          cache-dependency-path: "./docs/requirements*.txt"

      - name: "Install wheel"
        run: "python3 -m pip install wheel==${{ env.WHEEL_VERSION }}"

      - name: "Install docs requirements"
        run: "python3 -m pip install -r ./docs/requirements.txt -r ./docs/requirements-sphinx.txt"

      - name: "Build docs"
        run: "python3 -m sphinx -b html ./docs/ ./docs/_build/"

  test:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11.0-beta.3"]
        include:
          - python-version: "3.10"
            dev: true

    name: "Python ${{ matrix.python-version }}"

    runs-on: "ubuntu-latest"
    continue-on-error: "${{ startsWith(matrix.python-version, '3.11') }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python"
        name: "Install Python by version"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Cache pipx"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.pipx/"
          key: "pipx-${{ runner.os }}-${{ steps.python.outputs.python-version }}"

      - name: "Install poetry"
        run: "pipx install --python='${{ steps.python.outputs.python-path }}' poetry==${{ env.POETRY_VERSION }}"

      - name: "Cache venv"
        if: "${{ matrix.dev == true }}"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.venv/"
          key: "venv-${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}"

      - name: "Install package"
        if: "${{ matrix.dev == true }}"
        run: "poetry install"

      - name: "Run pre-commit"
        if: "${{ matrix.dev == true }}"
        uses: "pre-commit/action@v3.0.0"

      - name: "Install tox & tox-gh-actions"
        run: |
          set -euo pipefail

          pipx install --python='${{ steps.python.outputs.python-path }}' tox==${{ env.TOX_VERSION }}
          pipx inject tox tox-gh-actions==${{ env.TOX_GH_ACTIONS_VERSION }}

      - name: "Cache tox directory"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.tox/"
          key: "tox-${{ matrix.python-version }}"

      - name: "Run tests"
        run: "tox"

      - name: "Send report to coveralls"
        if: "${{ matrix.dev == true }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: "poetry run python3 -m coveralls --service=github"

  package:
    needs: ["test"]

    name: "Build & deploy package"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python"
        name: "Install Python"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version-file: ".python-version"

      - name: "Cache pipx"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.pipx/"
          key: "pipx-${{ runner.os }}-${{ steps.python.outputs.python-version }}"

      - name: "Install poetry"
        run: "pipx install --python='${{ steps.python.outputs.python-path }}' poetry==${{ env.POETRY_VERSION }}"

      - name: "Build package"
        run: "poetry build"

      - name: "Install twine"
        run: "pipx install --python='${{ steps.python.outputs.python-path }}' twine==${{ env.TWINE_VERSION }}"

      - name: "Check package"
        run: "twine check ./dist/*"

      - name: "Publish package"
        if: "${{ startsWith(github.ref, 'refs/tags/') }}"
        uses: "pypa/gh-action-pypi-publish@v1.5.0"
        with:
          user: "${{ secrets.PYPI_USERNAME }}"
          password: "${{ secrets.PYPI_PASSWORD }}"

  release:
    needs: ["package"]
    if: "${{ startsWith(github.ref, 'refs/tags/') }}"

    name: "Create GitHub release"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - name: "Fetch git data"
        run: |
          set -euo pipefail

          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          git fetch --prune --unshallow

      - id: "python"
        name: "Install Python"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version-file: ".python-version"

      - name: "Cache pipx"
        uses: "actions/cache@v3.0.4"
        with:
          path: "./.pipx/"
          key: "pipx-${{ runner.os }}-${{ steps.python.outputs.python-version }}"

      - name: "Install badabump"
        run: "pipx install --python='${{ steps.python.outputs.python-path }}' badabump==${{ env.BADABUMP_VERSION }}"

      - id: "badabump"
        name: "Run badabump"
        run: 'badabump-ci prepare_release "${{ github.ref }}"'

      - name: "Create new release"
        uses: "actions/create-release@v1.1.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          tag_name: "${{ steps.badabump.outputs.tag_name }}"
          release_name: "${{ steps.badabump.outputs.release_name }}"
          body: "${{ steps.badabump.outputs.release_body }}"
          prerelease: "${{ steps.badabump.outputs.is_pre_release }}"
