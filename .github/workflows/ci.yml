defaults:
  run:
    shell: "bash"

name: "CI"

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  PYTHONUNBUFFERED: "1"
  # Get latest versions by running,
  #
  # ```bash
  # pip-latest-release badabump wheel
  # ```
  #
  BADABUMP_VERSION: "21.3.3"
  WHEEL_VERSION: "0.37.1"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python_and_poetry"
        uses: "./.github/actions/install_python_and_poetry"
        with:
          python-version-file: ".python-version"

      - name: "Install package"
        run: "poetry install"

      - name: "Import package"
        run: "poetry run python3 -c 'import aiohttp_middlewares'"

  docs:
    name: "Verify documentation build well"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python"
        name: "Install Python"
        uses: "actions/setup-python@v4.0.0"
        with:
          python-version-file: ".python-version"
          cache: "pip"
          cache-dependency-path: "./docs/requirements*.txt"

      - name: "Install wheel"
        run: "python3 -m pip install wheel==${{ env.WHEEL_VERSION }}"

      - name: "Install docs requirements"
        run: "python3 -m pip install -r ./docs/requirements.txt -r ./docs/requirements-sphinx.txt"

      - name: "Build docs"
        run: "python3 -m sphinx -b html ./docs/ ./docs/_build/"

  test:
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11.0-beta.3"]
        include:
          - python-version: "3.10"
            dev: true

    name: "Python ${{ matrix.python-version }}"

    runs-on: "ubuntu-latest"
    continue-on-error: "${{ startsWith(matrix.python-version, '3.11') }}"

    steps:
      - uses: "actions/checkout@v3.0.2"

      - id: "python_and_poetry"
        uses: "./.github/actions/install_python_and_poetry"
        with:
          python-version: "${{ matrix.python-version }}"

      - if: "${{ matrix.dev == 'true' }}"
        uses: "./.github/actions/run_pre_commit"
        with:
          python-version: "${{ steps.python_and_poetry.outputs.python-version }}"

      - uses: "./.github/actions/run_tox"
        with:
          python-path: "${{ steps.python_and_poetry.outputs.python-path }}"
          python-version: "${{ steps.python_and_poetry.outputs.python-version }}"
          use-coveralls: "${{ matrix.dev }}"
          coveralls-token: "${{ secrets.GITHUB_TOKEN }}"

  package:
    needs: ["test"]

    uses: "./.github/workflows/ci_package.yml"
    secrets:
      PYPI_USERNAME: "${{ secrets.PYPI_USERNAME }}"
      PYPI_PASSWORD: "${{ secrets.PYPI_PASSWORD }}"

  release:
    needs: ["package"]
    if: "${{ startsWith(github.ref, 'refs/tags/') }}"

    uses: "./.github/workflows/ci_release.yml"
    secrets:
      GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
